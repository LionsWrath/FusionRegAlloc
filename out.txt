	.text
	.file	"<stdin>"
	.globl	main
	.p2align	4, 0x90
	.type	main,@function
main:                                   # @main
	.cfi_startproc
# BB#0:                                 # %entry
	pushl	%ebp
.Ltmp0:
	.cfi_def_cfa_offset 8
.Ltmp1:
	.cfi_offset %ebp, -8
	movl	%esp, %ebp
.Ltmp2:
	.cfi_def_cfa_register %ebp
	pushl	%ebx
	pushl	%edi
	pushl	%esi
	subl	$108, %esp
.Ltmp3:
	.cfi_offset %esi, -20
.Ltmp4:
	.cfi_offset %edi, -16
.Ltmp5:
	.cfi_offset %ebx, -12
	movl	12(%ebp), %eax
	movl	8(%ebp), %ecx
	movl	$0, -108(%ebp)
	movl	%ecx, -88(%ebp)
	movl	%eax, -72(%ebp)
	movl	$1024, -48(%ebp)        # imm = 0x400
	movl	$1024, -64(%ebp)        # imm = 0x400
	movl	$1024, -60(%ebp)        # imm = 0x400
	movl	$1024, -44(%ebp)        # imm = 0x400
	subl	$4, %esp
	pushl	$8
	pushl	$0
	pushl	$1048576                # imm = 0x100000
	calll	polybench_alloc_data
	addl	$16, %esp
	movl	%eax, -56(%ebp)
	subl	$4, %esp
	pushl	$8
	pushl	$0
	pushl	$1048576                # imm = 0x100000
	calll	polybench_alloc_data
	addl	$16, %esp
	movl	%eax, -40(%ebp)
	subl	$4, %esp
	pushl	$8
	pushl	$0
	pushl	$1048576                # imm = 0x100000
	calll	polybench_alloc_data
	addl	$16, %esp
	movl	%eax, -32(%ebp)
	subl	$4, %esp
	pushl	$8
	pushl	$0
	pushl	$1048576                # imm = 0x100000
	calll	polybench_alloc_data
	addl	$16, %esp
	movl	%eax, -24(%ebp)
	subl	$4, %esp
	pushl	$8
	pushl	$0
	pushl	$1048576                # imm = 0x100000
	calll	polybench_alloc_data
	addl	$16, %esp
	movl	%eax, -16(%ebp)
	subl	$8, %esp
	leal	-96(%ebp), %ecx
	leal	-104(%ebp), %edx
	pushl	%eax
	pushl	-24(%ebp)
	pushl	-32(%ebp)
	pushl	-40(%ebp)
	pushl	%ecx
	pushl	%edx
	pushl	-44(%ebp)
	pushl	-60(%ebp)
	pushl	-64(%ebp)
	pushl	-48(%ebp)
	calll	init_array
	addl	$48, %esp
	movl	-48(%ebp), %eax
	movl	%eax, -76(%ebp)         # 4-byte Spill
	movl	-64(%ebp), %eax
	movl	%eax, -80(%ebp)         # 4-byte Spill
	movl	-60(%ebp), %eax
	movl	%eax, -84(%ebp)         # 4-byte Spill
	movl	-44(%ebp), %eax
	movsd	-104(%ebp), %xmm0       # xmm0 = mem[0],zero
	movsd	-96(%ebp), %xmm1        # xmm1 = mem[0],zero
	movl	-56(%ebp), %ecx
	movl	-40(%ebp), %edx
	movl	-32(%ebp), %esi
	movl	-24(%ebp), %edi
	movl	-16(%ebp), %ebx
	subl	$64, %esp
	movl	%ebx, 48(%esp)
	movl	%edi, 44(%esp)
	movl	%esi, 40(%esp)
	movl	%edx, 36(%esp)
	movl	%ecx, 32(%esp)
	movsd	%xmm1, 24(%esp)
	movsd	%xmm0, 16(%esp)
	movl	%eax, 12(%esp)
	movl	-84(%ebp), %eax         # 4-byte Reload
	movl	%eax, 8(%esp)
	movl	-80(%ebp), %eax         # 4-byte Reload
	movl	%eax, 4(%esp)
	movl	-76(%ebp), %eax         # 4-byte Reload
	movl	%eax, (%esp)
	calll	kernel_2mm
	addl	$64, %esp
	cmpl	$43, -88(%ebp)
	jl	.LBB0_3
# BB#1:                                 # %land.lhs.true
	movl	-72(%ebp), %eax
	subl	$8, %esp
	pushl	$.L.str
	pushl	(%eax)
	calll	strcmp
	addl	$16, %esp
	testl	%eax, %eax
	jne	.LBB0_3
# BB#2:                                 # %if.then
	subl	$4, %esp
	pushl	-16(%ebp)
	pushl	-44(%ebp)
	pushl	-48(%ebp)
	calll	print_array
	addl	$16, %esp
.LBB0_3:                                # %if.end
	subl	$12, %esp
	pushl	-56(%ebp)
	calll	free
	addl	$4, %esp
	pushl	-40(%ebp)
	calll	free
	addl	$4, %esp
	pushl	-32(%ebp)
	calll	free
	addl	$4, %esp
	pushl	-24(%ebp)
	calll	free
	addl	$4, %esp
	pushl	-16(%ebp)
	calll	free
	addl	$16, %esp
	xorl	%eax, %eax
	addl	$108, %esp
	popl	%esi
	popl	%edi
	popl	%ebx
	popl	%ebp
	retl
.Lfunc_end0:
	.size	main, .Lfunc_end0-main
	.cfi_endproc

	.p2align	4, 0x90
	.type	init_array,@function
init_array:                             # @init_array
	.cfi_startproc
# BB#0:                                 # %entry
	pushl	%ebp
.Ltmp6:
	.cfi_def_cfa_offset 8
.Ltmp7:
	.cfi_offset %ebp, -8
	movl	%esp, %ebp
.Ltmp8:
	.cfi_def_cfa_register %ebp
	subl	$72, %esp
	movl	8(%ebp), %eax
	movl	%eax, -24(%ebp)
	movl	12(%ebp), %eax
	movl	%eax, -20(%ebp)
	movl	16(%ebp), %eax
	movl	%eax, -16(%ebp)
	movl	20(%ebp), %eax
	movl	%eax, -12(%ebp)
	movl	24(%ebp), %eax
	movl	%eax, -72(%ebp)
	movl	28(%ebp), %eax
	movl	%eax, -64(%ebp)
	movl	32(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	36(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	40(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	44(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	-72(%ebp), %eax
	movl	$1088399104, 4(%eax)    # imm = 0x40DFA700
	movl	$0, (%eax)
	movl	-64(%ebp), %eax
	movl	$1084265984, 4(%eax)    # imm = 0x40A09600
	movl	$0, (%eax)
	movl	$0, -8(%ebp)
	jmp	.LBB1_1
	.p2align	4, 0x90
.LBB1_5:                                # %for.inc8
                                        #   in Loop: Header=BB1_1 Depth=1
	incl	-8(%ebp)
.LBB1_1:                                # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB1_3 Depth 2
	movl	-8(%ebp), %eax
	cmpl	-24(%ebp), %eax
	jge	.LBB1_6
# BB#2:                                 # %for.body
                                        #   in Loop: Header=BB1_1 Depth=1
	movl	$0, -4(%ebp)
	jmp	.LBB1_3
	.p2align	4, 0x90
.LBB1_4:                                # %for.inc
                                        #   in Loop: Header=BB1_3 Depth=2
	movl	-8(%ebp), %ecx
	cvtsi2sdl	%ecx, %xmm0
	movl	-4(%ebp), %eax
	cvtsi2sdl	%eax, %xmm1
	mulsd	%xmm0, %xmm1
	xorps	%xmm0, %xmm0
	cvtsi2sdl	-24(%ebp), %xmm0
	divsd	%xmm0, %xmm1
	shll	$13, %ecx
	addl	-56(%ebp), %ecx
	movsd	%xmm1, (%ecx,%eax,8)
	incl	-4(%ebp)
.LBB1_3:                                # %for.cond1
                                        #   Parent Loop BB1_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%ebp), %eax
	cmpl	-16(%ebp), %eax
	jl	.LBB1_4
	jmp	.LBB1_5
.LBB1_6:                                # %for.end10
	movl	$0, -8(%ebp)
	jmp	.LBB1_7
	.p2align	4, 0x90
.LBB1_11:                               # %for.inc31
                                        #   in Loop: Header=BB1_7 Depth=1
	incl	-8(%ebp)
.LBB1_7:                                # %for.cond11
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB1_9 Depth 2
	movl	-8(%ebp), %eax
	cmpl	-16(%ebp), %eax
	jge	.LBB1_12
# BB#8:                                 # %for.body14
                                        #   in Loop: Header=BB1_7 Depth=1
	movl	$0, -4(%ebp)
	jmp	.LBB1_9
	.p2align	4, 0x90
.LBB1_10:                               # %for.inc28
                                        #   in Loop: Header=BB1_9 Depth=2
	movl	-8(%ebp), %edx
	cvtsi2sdl	%edx, %xmm0
	movl	-4(%ebp), %eax
	leal	1(%eax), %ecx
	cvtsi2sdl	%ecx, %xmm1
	mulsd	%xmm0, %xmm1
	xorps	%xmm0, %xmm0
	cvtsi2sdl	-20(%ebp), %xmm0
	divsd	%xmm0, %xmm1
	shll	$13, %edx
	addl	-48(%ebp), %edx
	movsd	%xmm1, (%edx,%eax,8)
	incl	-4(%ebp)
.LBB1_9:                                # %for.cond15
                                        #   Parent Loop BB1_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%ebp), %eax
	cmpl	-20(%ebp), %eax
	jl	.LBB1_10
	jmp	.LBB1_11
.LBB1_12:                               # %for.end33
	movl	$0, -8(%ebp)
	jmp	.LBB1_13
	.p2align	4, 0x90
.LBB1_17:                               # %for.inc55
                                        #   in Loop: Header=BB1_13 Depth=1
	incl	-8(%ebp)
.LBB1_13:                               # %for.cond34
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB1_15 Depth 2
	movl	-8(%ebp), %eax
	cmpl	-12(%ebp), %eax
	jge	.LBB1_18
# BB#14:                                # %for.body37
                                        #   in Loop: Header=BB1_13 Depth=1
	movl	$0, -4(%ebp)
	jmp	.LBB1_15
	.p2align	4, 0x90
.LBB1_16:                               # %for.inc52
                                        #   in Loop: Header=BB1_15 Depth=2
	movl	-8(%ebp), %edx
	cvtsi2sdl	%edx, %xmm0
	movl	-4(%ebp), %eax
	leal	3(%eax), %ecx
	cvtsi2sdl	%ecx, %xmm1
	mulsd	%xmm0, %xmm1
	xorps	%xmm0, %xmm0
	cvtsi2sdl	-12(%ebp), %xmm0
	divsd	%xmm0, %xmm1
	shll	$13, %edx
	addl	-40(%ebp), %edx
	movsd	%xmm1, (%edx,%eax,8)
	incl	-4(%ebp)
.LBB1_15:                               # %for.cond38
                                        #   Parent Loop BB1_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%ebp), %eax
	cmpl	-20(%ebp), %eax
	jl	.LBB1_16
	jmp	.LBB1_17
.LBB1_18:                               # %for.end57
	movl	$0, -8(%ebp)
	jmp	.LBB1_19
	.p2align	4, 0x90
.LBB1_23:                               # %for.inc79
                                        #   in Loop: Header=BB1_19 Depth=1
	incl	-8(%ebp)
.LBB1_19:                               # %for.cond58
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB1_21 Depth 2
	movl	-8(%ebp), %eax
	cmpl	-24(%ebp), %eax
	jge	.LBB1_24
# BB#20:                                # %for.body61
                                        #   in Loop: Header=BB1_19 Depth=1
	movl	$0, -4(%ebp)
	jmp	.LBB1_21
	.p2align	4, 0x90
.LBB1_22:                               # %for.inc76
                                        #   in Loop: Header=BB1_21 Depth=2
	movl	-8(%ebp), %edx
	cvtsi2sdl	%edx, %xmm0
	movl	-4(%ebp), %eax
	leal	2(%eax), %ecx
	cvtsi2sdl	%ecx, %xmm1
	mulsd	%xmm0, %xmm1
	xorps	%xmm0, %xmm0
	cvtsi2sdl	-16(%ebp), %xmm0
	divsd	%xmm0, %xmm1
	shll	$13, %edx
	addl	-32(%ebp), %edx
	movsd	%xmm1, (%edx,%eax,8)
	incl	-4(%ebp)
.LBB1_21:                               # %for.cond62
                                        #   Parent Loop BB1_19 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%ebp), %eax
	cmpl	-12(%ebp), %eax
	jl	.LBB1_22
	jmp	.LBB1_23
.LBB1_24:                               # %for.end81
	addl	$72, %esp
	popl	%ebp
	retl
.Lfunc_end1:
	.size	init_array, .Lfunc_end1-init_array
	.cfi_endproc

	.p2align	4, 0x90
	.type	kernel_2mm,@function
kernel_2mm:                             # @kernel_2mm
	.cfi_startproc
# BB#0:                                 # %entry
	pushl	%ebp
.Ltmp9:
	.cfi_def_cfa_offset 8
.Ltmp10:
	.cfi_offset %ebp, -8
	movl	%esp, %ebp
.Ltmp11:
	.cfi_def_cfa_register %ebp
	subl	$80, %esp
	movl	8(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	12(%ebp), %eax
	movl	%eax, -28(%ebp)
	movl	16(%ebp), %eax
	movl	%eax, -64(%ebp)
	movl	20(%ebp), %eax
	movl	%eax, -60(%ebp)
	movl	40(%ebp), %eax
	movl	%eax, -16(%ebp)
	movl	44(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	48(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	52(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	56(%ebp), %eax
	movl	%eax, -24(%ebp)
	movsd	32(%ebp), %xmm0         # xmm0 = mem[0],zero
	movsd	24(%ebp), %xmm1         # xmm1 = mem[0],zero
	movsd	%xmm1, -80(%ebp)
	movsd	%xmm0, -72(%ebp)
	movl	$0, -8(%ebp)
	jmp	.LBB2_1
	.p2align	4, 0x90
.LBB2_8:                                # %for.inc28
                                        #   in Loop: Header=BB2_1 Depth=1
	incl	-8(%ebp)
.LBB2_1:                                # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB2_3 Depth 2
                                        #       Child Loop BB2_5 Depth 3
	movl	-8(%ebp), %eax
	cmpl	-32(%ebp), %eax
	jge	.LBB2_9
# BB#2:                                 # %for.body
                                        #   in Loop: Header=BB2_1 Depth=1
	movl	$0, -4(%ebp)
	jmp	.LBB2_3
	.p2align	4, 0x90
.LBB2_7:                                # %for.inc25
                                        #   in Loop: Header=BB2_3 Depth=2
	incl	-4(%ebp)
.LBB2_3:                                # %for.cond4
                                        #   Parent Loop BB2_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB2_5 Depth 3
	movl	-4(%ebp), %eax
	cmpl	-28(%ebp), %eax
	jge	.LBB2_8
# BB#4:                                 # %for.body6
                                        #   in Loop: Header=BB2_3 Depth=2
	movl	-4(%ebp), %eax
	movl	-8(%ebp), %ecx
	shll	$13, %ecx
	addl	-16(%ebp), %ecx
	movl	$0, 4(%ecx,%eax,8)
	movl	$0, (%ecx,%eax,8)
	movl	$0, -12(%ebp)
	jmp	.LBB2_5
	.p2align	4, 0x90
.LBB2_6:                                # %for.inc
                                        #   in Loop: Header=BB2_5 Depth=3
	movsd	-80(%ebp), %xmm0        # xmm0 = mem[0],zero
	movl	-12(%ebp), %ecx
	movl	-8(%ebp), %edx
	shll	$13, %edx
	movl	-56(%ebp), %eax
	addl	%edx, %eax
	mulsd	(%eax,%ecx,8), %xmm0
	movl	-4(%ebp), %eax
	shll	$13, %ecx
	addl	-48(%ebp), %ecx
	mulsd	(%ecx,%eax,8), %xmm0
	addl	-16(%ebp), %edx
	addsd	(%edx,%eax,8), %xmm0
	movsd	%xmm0, (%edx,%eax,8)
	incl	-12(%ebp)
.LBB2_5:                                # %for.cond9
                                        #   Parent Loop BB2_1 Depth=1
                                        #     Parent Loop BB2_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%ebp), %eax
	cmpl	-64(%ebp), %eax
	jl	.LBB2_6
	jmp	.LBB2_7
.LBB2_9:                                # %for.end30
	movl	$0, -8(%ebp)
	jmp	.LBB2_10
	.p2align	4, 0x90
.LBB2_17:                               # %for.inc65
                                        #   in Loop: Header=BB2_10 Depth=1
	incl	-8(%ebp)
.LBB2_10:                               # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB2_12 Depth 2
                                        #       Child Loop BB2_14 Depth 3
	movl	-8(%ebp), %eax
	cmpl	-32(%ebp), %eax
	jge	.LBB2_18
# BB#11:                                # %for.body33
                                        #   in Loop: Header=BB2_10 Depth=1
	movl	$0, -4(%ebp)
	jmp	.LBB2_12
	.p2align	4, 0x90
.LBB2_16:                               # %for.inc62
                                        #   in Loop: Header=BB2_12 Depth=2
	incl	-4(%ebp)
.LBB2_12:                               # %for.cond34
                                        #   Parent Loop BB2_10 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB2_14 Depth 3
	movl	-4(%ebp), %eax
	cmpl	-60(%ebp), %eax
	jge	.LBB2_17
# BB#13:                                # %for.body36
                                        #   in Loop: Header=BB2_12 Depth=2
	movl	-4(%ebp), %eax
	movl	-8(%ebp), %ecx
	shll	$13, %ecx
	addl	-24(%ebp), %ecx
	movsd	(%ecx,%eax,8), %xmm0    # xmm0 = mem[0],zero
	mulsd	-72(%ebp), %xmm0
	movsd	%xmm0, (%ecx,%eax,8)
	movl	$0, -12(%ebp)
	jmp	.LBB2_14
	.p2align	4, 0x90
.LBB2_15:                               # %for.inc59
                                        #   in Loop: Header=BB2_14 Depth=3
	movl	-12(%ebp), %ecx
	movl	-8(%ebp), %edx
	shll	$13, %edx
	movl	-16(%ebp), %eax
	addl	%edx, %eax
	movsd	(%eax,%ecx,8), %xmm0    # xmm0 = mem[0],zero
	movl	-4(%ebp), %eax
	shll	$13, %ecx
	addl	-40(%ebp), %ecx
	mulsd	(%ecx,%eax,8), %xmm0
	addl	-24(%ebp), %edx
	addsd	(%edx,%eax,8), %xmm0
	movsd	%xmm0, (%edx,%eax,8)
	incl	-12(%ebp)
.LBB2_14:                               # %for.cond42
                                        #   Parent Loop BB2_10 Depth=1
                                        #     Parent Loop BB2_12 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%ebp), %eax
	cmpl	-28(%ebp), %eax
	jl	.LBB2_15
	jmp	.LBB2_16
.LBB2_18:                               # %for.end67
	addl	$80, %esp
	popl	%ebp
	retl
.Lfunc_end2:
	.size	kernel_2mm, .Lfunc_end2-kernel_2mm
	.cfi_endproc

	.p2align	4, 0x90
	.type	print_array,@function
print_array:                            # @print_array
	.cfi_startproc
# BB#0:                                 # %entry
	pushl	%ebp
.Ltmp12:
	.cfi_def_cfa_offset 8
.Ltmp13:
	.cfi_offset %ebp, -8
	movl	%esp, %ebp
.Ltmp14:
	.cfi_def_cfa_register %ebp
	pushl	%esi
	subl	$52, %esp
.Ltmp15:
	.cfi_offset %esi, -12
	movl	16(%ebp), %eax
	movl	12(%ebp), %ecx
	movl	8(%ebp), %edx
	movl	%edx, -16(%ebp)
	movl	%ecx, -28(%ebp)
	movl	%eax, -24(%ebp)
	movl	$0, -12(%ebp)
	movl	$1717986919, %esi       # imm = 0x66666667
	jmp	.LBB3_1
	.p2align	4, 0x90
.LBB3_7:                                # %for.inc8
                                        #   in Loop: Header=BB3_1 Depth=1
	incl	-12(%ebp)
.LBB3_1:                                # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB3_3 Depth 2
	movl	-12(%ebp), %eax
	cmpl	-16(%ebp), %eax
	jge	.LBB3_8
# BB#2:                                 # %for.body
                                        #   in Loop: Header=BB3_1 Depth=1
	movl	$0, -8(%ebp)
	jmp	.LBB3_3
	.p2align	4, 0x90
.LBB3_6:                                # %for.inc
                                        #   in Loop: Header=BB3_3 Depth=2
	incl	-8(%ebp)
.LBB3_3:                                # %for.cond1
                                        #   Parent Loop BB3_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%ebp), %eax
	cmpl	-28(%ebp), %eax
	jge	.LBB3_7
# BB#4:                                 # %for.body3
                                        #   in Loop: Header=BB3_3 Depth=2
	movl	stderr, %eax
	movl	-8(%ebp), %ecx
	movl	-12(%ebp), %edx
	shll	$13, %edx
	addl	-24(%ebp), %edx
	movsd	(%edx,%ecx,8), %xmm0    # xmm0 = mem[0],zero
	movsd	%xmm0, 8(%esp)
	movl	%eax, (%esp)
	movl	$.L.str1, 4(%esp)
	calll	fprintf
	movl	-12(%ebp), %ecx
	imull	-16(%ebp), %ecx
	addl	-8(%ebp), %ecx
	movl	%ecx, %eax
	imull	%esi
	movl	%edx, %eax
	shrl	$31, %eax
	sarl	$3, %edx
	addl	%eax, %edx
	shll	$2, %edx
	leal	(%edx,%edx,4), %eax
	cmpl	%eax, %ecx
	jne	.LBB3_6
# BB#5:                                 # %if.then
                                        #   in Loop: Header=BB3_3 Depth=2
	movl	stderr, %eax
	movl	%eax, (%esp)
	movl	$.L.str2, 4(%esp)
	calll	fprintf
	jmp	.LBB3_6
.LBB3_8:                                # %for.end10
	movl	stderr, %eax
	movl	%eax, (%esp)
	movl	$.L.str2, 4(%esp)
	calll	fprintf
	addl	$52, %esp
	popl	%esi
	popl	%ebp
	retl
.Lfunc_end3:
	.size	print_array, .Lfunc_end3-print_array
	.cfi_endproc

	.type	.L.str,@object          # @.str
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str:
	.zero	1
	.size	.L.str, 1

	.type	.L.str1,@object         # @.str1
.L.str1:
	.asciz	"%0.2lf "
	.size	.L.str1, 8

	.type	.L.str2,@object         # @.str2
.L.str2:
	.asciz	"\n"
	.size	.L.str2, 2


	.ident	"clang version 3.7.0 (trunk 233254)"
	.section	".note.GNU-stack","",@progbits
