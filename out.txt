BB#0: derived from LLVM BB %entry
    Live Ins: %EDI %RSI
	%vreg1<def> = COPY %RSI; GR64:%vreg1
	%vreg0<def> = COPY %EDI; GR32:%vreg0
	MOV32mi <fi#0>, 1, %noreg, 0, %noreg, 0; mem:ST4[%retval]
	MOV32mr <fi#1>, 1, %noreg, 0, %noreg, %vreg0; mem:ST4[%argc.addr] GR32:%vreg0
	MOV64mr <fi#2>, 1, %noreg, 0, %noreg, %vreg1; mem:ST8[%argv.addr] GR64:%vreg1
	MOV32mi <fi#3>, 1, %noreg, 0, %noreg, 1024; mem:ST4[%ni]
	MOV32mi <fi#4>, 1, %noreg, 0, %noreg, 1024; mem:ST4[%nj]
	MOV32mi <fi#5>, 1, %noreg, 0, %noreg, 1024; mem:ST4[%nk]
	MOV32mi <fi#6>, 1, %noreg, 0, %noreg, 1024; mem:ST4[%nl]
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>
	%EDI<def,dead> = MOV32ri64 1048576, %RDI<imp-def>
	%ESI<def> = MOV32ri 8
	CALL64pcrel32 <ga:@polybench_alloc_data>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %ESI<imp-use>, %RSP<imp-def>, %RAX<imp-def>
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>
	%vreg5<def> = COPY %RAX<kill>; GR64:%vreg5
	MOV64mr <fi#9>, 1, %noreg, 0, %noreg, %vreg5; mem:ST8[%tmp] GR64:%vreg5
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>
	%EDI<def,dead> = MOV32ri64 1048576, %RDI<imp-def>
	%ESI<def> = MOV32ri 8
	CALL64pcrel32 <ga:@polybench_alloc_data>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %ESI<imp-use>, %RSP<imp-def>, %RAX<imp-def>
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>
	%vreg6<def> = COPY %RAX<kill>; GR64:%vreg6
	MOV64mr <fi#10>, 1, %noreg, 0, %noreg, %vreg6; mem:ST8[%A] GR64:%vreg6
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>
	%EDI<def,dead> = MOV32ri64 1048576, %RDI<imp-def>
	%ESI<def> = MOV32ri 8
	CALL64pcrel32 <ga:@polybench_alloc_data>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %ESI<imp-use>, %RSP<imp-def>, %RAX<imp-def>
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>
	%vreg7<def> = COPY %RAX<kill>; GR64:%vreg7
	MOV64mr <fi#11>, 1, %noreg, 0, %noreg, %vreg7; mem:ST8[%B] GR64:%vreg7
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>
	%EDI<def,dead> = MOV32ri64 1048576, %RDI<imp-def>
	%ESI<def> = MOV32ri 8
	CALL64pcrel32 <ga:@polybench_alloc_data>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %ESI<imp-use>, %RSP<imp-def>, %RAX<imp-def>
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>
	%vreg8<def> = COPY %RAX<kill>; GR64:%vreg8
	MOV64mr <fi#12>, 1, %noreg, 0, %noreg, %vreg8; mem:ST8[%C] GR64:%vreg8
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>
	%EDI<def,dead> = MOV32ri64 1048576, %RDI<imp-def>
	%ESI<def> = MOV32ri 8
	CALL64pcrel32 <ga:@polybench_alloc_data>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %ESI<imp-use>, %RSP<imp-def>, %RAX<imp-def>
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>
	%vreg9<def> = COPY %RAX<kill>; GR64:%vreg9
	MOV64mr <fi#13>, 1, %noreg, 0, %noreg, %vreg9; mem:ST8[%D] GR64:%vreg9
	%vreg10<def> = MOV32rm <fi#3>, 1, %noreg, 0, %noreg; mem:LD4[%ni] GR32:%vreg10
	%vreg11<def> = MOV32rm <fi#4>, 1, %noreg, 0, %noreg; mem:LD4[%nj] GR32:%vreg11
	%vreg12<def> = MOV32rm <fi#5>, 1, %noreg, 0, %noreg; mem:LD4[%nk] GR32:%vreg12
	%vreg13<def> = MOV32rm <fi#6>, 1, %noreg, 0, %noreg; mem:LD4[%nl] GR32:%vreg13
	ADJCALLSTACKDOWN64 32, 32, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>
	%vreg18<def> = LEA64r <fi#7>, 1, %noreg, 0, %noreg; GR64:%vreg18
	%vreg19<def> = LEA64r <fi#8>, 1, %noreg, 0, %noreg; GR64:%vreg19
	%EDI<def> = COPY %vreg10; GR32:%vreg10
	%ESI<def> = COPY %vreg11; GR32:%vreg11
	%EDX<def> = COPY %vreg12; GR32:%vreg12
	%ECX<def> = COPY %vreg13; GR32:%vreg13
	%R8<def> = COPY %vreg18; GR64:%vreg18
	%R9<def> = COPY %vreg19; GR64:%vreg19
	PUSH64r %vreg9, %RSP<imp-def>, %RSP<imp-use>; GR64:%vreg9
	PUSH64rmm <fi#12>, 1, %noreg, 0, %noreg, %RSP<imp-def>, %RSP<imp-use>
	PUSH64rmm <fi#11>, 1, %noreg, 0, %noreg, %RSP<imp-def>, %RSP<imp-use>
	PUSH64rmm <fi#10>, 1, %noreg, 0, %noreg, %RSP<imp-def>, %RSP<imp-use>
	CALL64pcrel32 <ga:@init_array>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %EDI<imp-use>, %ESI<imp-use>, %EDX<imp-use,kill>, %ECX<imp-use,kill>, %R8<imp-use,kill>, %R9<imp-use,kill>, %RSP<imp-def>
	ADJCALLSTACKUP64 32, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>
	%vreg20<def> = MOV32rm <fi#3>, 1, %noreg, 0, %noreg; mem:LD4[%ni] GR32:%vreg20
	%vreg21<def> = MOV32rm <fi#4>, 1, %noreg, 0, %noreg; mem:LD4[%nj] GR32:%vreg21
	%vreg22<def> = MOV32rm <fi#5>, 1, %noreg, 0, %noreg; mem:LD4[%nk] GR32:%vreg22
	%vreg23<def> = MOV32rm <fi#6>, 1, %noreg, 0, %noreg; mem:LD4[%nl] GR32:%vreg23
	%vreg24<def> = MOVSDrm <fi#7>, 1, %noreg, 0, %noreg; mem:LD8[%alpha] FR64:%vreg24
	%vreg25<def> = MOVSDrm <fi#8>, 1, %noreg, 0, %noreg; mem:LD8[%beta] FR64:%vreg25
	%vreg26<def> = MOV64rm <fi#9>, 1, %noreg, 0, %noreg; mem:LD8[%tmp] GR64:%vreg26
	%vreg27<def> = MOV64rm <fi#10>, 1, %noreg, 0, %noreg; mem:LD8[%A] GR64:%vreg27
	ADJCALLSTACKDOWN64 24, 24, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>
	%EDI<def> = COPY %vreg20; GR32:%vreg20
	%ESI<def> = COPY %vreg21; GR32:%vreg21
	%EDX<def> = COPY %vreg22; GR32:%vreg22
	%ECX<def> = COPY %vreg23; GR32:%vreg23
	%XMM0<def> = COPY %vreg24; FR64:%vreg24
	%XMM1<def> = COPY %vreg25; FR64:%vreg25
	%R8<def> = COPY %vreg26; GR64:%vreg26
	%R9<def> = COPY %vreg27; GR64:%vreg27
	PUSH64rmm <fi#13>, 1, %noreg, 0, %noreg, %RSP<imp-def>, %RSP<imp-use>
	PUSH64rmm <fi#12>, 1, %noreg, 0, %noreg, %RSP<imp-def>, %RSP<imp-use>
	PUSH64rmm <fi#11>, 1, %noreg, 0, %noreg, %RSP<imp-def>, %RSP<imp-use>
	CALL64pcrel32 <ga:@kernel_2mm>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %EDI<imp-use>, %ESI<imp-use>, %EDX<imp-use,kill>, %ECX<imp-use,kill>, %XMM0<imp-use,kill>, %XMM1<imp-use,kill>, %R8<imp-use,kill>, %R9<imp-use,kill>, %RSP<imp-def>
	ADJCALLSTACKUP64 24, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>
	CMP32mi8 <fi#1>, 1, %noreg, 0, %noreg, 43, %EFLAGS<imp-def>; mem:LD4[%argc.addr]
	JL_1 <BB#3>, %EFLAGS<imp-use,kill>
	JMP_1 <BB#1>
    Successors according to CFG: BB#1(0x40000000 / 0x80000000 = 50.00%) BB#3(0x40000000 / 0x80000000 = 50.00%)
BB Number: 0
BB#1: derived from LLVM BB %land.lhs.true
    Predecessors according to CFG: BB#0
	%vreg34<def> = MOV64rm <fi#2>, 1, %noreg, 0, %noreg; mem:LD8[%argv.addr] GR64:%vreg34
	%vreg35<def> = MOV64rm %vreg34, 1, %noreg, 0, %noreg; mem:LD8[%arrayidx10] GR64:%vreg35,%vreg34
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>
	%ESI<def,dead> = MOV32ri64 <ga:@.str>, %RSI<imp-def>
	%RDI<def> = COPY %vreg35; GR64:%vreg35
	CALL64pcrel32 <ga:@strcmp>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSI<imp-use>, %RSP<imp-def>, %EAX<imp-def>
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>
	%vreg38<def> = COPY %EAX<kill>; GR32:%vreg38
	TEST32rr %vreg38, %vreg38, %EFLAGS<imp-def>; GR32:%vreg38
	JNE_1 <BB#3>, %EFLAGS<imp-use,kill>
	JMP_1 <BB#2>
    Successors according to CFG: BB#3(0x50000000 / 0x80000000 = 62.50%) BB#2(0x30000000 / 0x80000000 = 37.50%)
BB Number: 1
BB#2: derived from LLVM BB %if.then
    Predecessors according to CFG: BB#1
	%vre